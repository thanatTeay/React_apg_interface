{"ast":null,"code":"var _ = require('./utils');\n\nvar currentLevel = 'info';\nvar levels = {\n  'trace': 0,\n  'debug': 1,\n  'info': 2,\n  'warn': 3,\n  'error': 4,\n  'fatal': 5\n}; // Logger implementation..\n\nfunction log(level) {\n  // Return a console message depending on the logging level..\n  return function (message) {\n    if (levels[level] >= levels[currentLevel]) {\n      console.log(\"[\".concat(_.formatDate(new Date()), \"] \").concat(level, \": \").concat(message));\n    }\n  };\n}\n\nmodule.exports = {\n  // Change the current logging level..\n  setLevel: function setLevel(level) {\n    currentLevel = level;\n  },\n  trace: log('trace'),\n  debug: log('debug'),\n  info: log('info'),\n  warn: log('warn'),\n  error: log('error'),\n  fatal: log('fatal')\n};","map":{"version":3,"sources":["D:/Hobbies/apg-interface/node_modules/tmi.js/lib/logger.js"],"names":["_","require","currentLevel","levels","log","level","message","console","formatDate","Date","module","exports","setLevel","trace","debug","info","warn","error","fatal"],"mappings":"AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AAEA,IAAIC,YAAY,GAAG,MAAnB;AACA,IAAMC,MAAM,GAAG;AAAE,WAAS,CAAX;AAAc,WAAS,CAAvB;AAA0B,UAAQ,CAAlC;AAAqC,UAAQ,CAA7C;AAAgD,WAAS,CAAzD;AAA4D,WAAS;AAArE,CAAf,C,CAEA;;AACA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AACnB;AACA,SAAO,UAASC,OAAT,EAAkB;AACxB,QAAGH,MAAM,CAACE,KAAD,CAAN,IAAiBF,MAAM,CAACD,YAAD,CAA1B,EAA0C;AACzCK,MAAAA,OAAO,CAACH,GAAR,YAAgBJ,CAAC,CAACQ,UAAF,CAAa,IAAIC,IAAJ,EAAb,CAAhB,eAA6CJ,KAA7C,eAAuDC,OAAvD;AACA;AACD,GAJD;AAKA;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AAChB;AACAC,EAAAA,QAFgB,oBAEPP,KAFO,EAEA;AACfH,IAAAA,YAAY,GAAGG,KAAf;AACA,GAJe;AAKhBQ,EAAAA,KAAK,EAAET,GAAG,CAAC,OAAD,CALM;AAMhBU,EAAAA,KAAK,EAAEV,GAAG,CAAC,OAAD,CANM;AAOhBW,EAAAA,IAAI,EAAEX,GAAG,CAAC,MAAD,CAPO;AAQhBY,EAAAA,IAAI,EAAEZ,GAAG,CAAC,MAAD,CARO;AAShBa,EAAAA,KAAK,EAAEb,GAAG,CAAC,OAAD,CATM;AAUhBc,EAAAA,KAAK,EAAEd,GAAG,CAAC,OAAD;AAVM,CAAjB","sourcesContent":["const _ = require('./utils');\n\nlet currentLevel = 'info';\nconst levels = { 'trace': 0, 'debug': 1, 'info': 2, 'warn': 3, 'error': 4, 'fatal': 5 };\n\n// Logger implementation..\nfunction log(level) {\n\t// Return a console message depending on the logging level..\n\treturn function(message) {\n\t\tif(levels[level] >= levels[currentLevel]) {\n\t\t\tconsole.log(`[${_.formatDate(new Date())}] ${level}: ${message}`);\n\t\t}\n\t};\n}\n\nmodule.exports = {\n\t// Change the current logging level..\n\tsetLevel(level) {\n\t\tcurrentLevel = level;\n\t},\n\ttrace: log('trace'),\n\tdebug: log('debug'),\n\tinfo: log('info'),\n\twarn: log('warn'),\n\terror: log('error'),\n\tfatal: log('fatal')\n};\n"]},"metadata":{},"sourceType":"script"}