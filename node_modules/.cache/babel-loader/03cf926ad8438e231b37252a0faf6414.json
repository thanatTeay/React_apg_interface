{"ast":null,"code":"/*\r\n\tCopyright (c) 2013-2015, Fionn Kelleher All rights reserved.\r\n\r\n\tRedistribution and use in source and binary forms, with or without modification,\r\n\tare permitted provided that the following conditions are met:\r\n\r\n\t\tRedistributions of source code must retain the above copyright notice,\r\n\t\tthis list of conditions and the following disclaimer.\r\n\r\n\t\tRedistributions in binary form must reproduce the above copyright notice,\r\n\t\tthis list of conditions and the following disclaimer in the documentation and/or other materials\r\n\t\tprovided with the distribution.\r\n\r\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n\tANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n\tWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n\tIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n\tINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n\t(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n\tOR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n\tWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\tARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\r\n\tOF SUCH DAMAGE.\r\n*/\nvar _ = require('./utils');\n\nvar nonspaceRegex = /\\S+/g;\n\nfunction parseComplexTag(tags, tagKey) {\n  var splA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';\n  var splB = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';\n  var splC = arguments.length > 4 ? arguments[4] : undefined;\n  var raw = tags[tagKey];\n\n  if (raw === undefined) {\n    return tags;\n  }\n\n  var tagIsString = typeof raw === 'string';\n  tags[tagKey + '-raw'] = tagIsString ? raw : null;\n\n  if (raw === true) {\n    tags[tagKey] = null;\n    return tags;\n  }\n\n  tags[tagKey] = {};\n\n  if (tagIsString) {\n    var spl = raw.split(splA);\n\n    for (var i = 0; i < spl.length; i++) {\n      var parts = spl[i].split(splB);\n      var val = parts[1];\n\n      if (splC !== undefined && val) {\n        val = val.split(splC);\n      }\n\n      tags[tagKey][parts[0]] = val || null;\n    }\n  }\n\n  return tags;\n}\n\nmodule.exports = {\n  // Parse Twitch badges..\n  badges: function badges(tags) {\n    return parseComplexTag(tags, 'badges');\n  },\n  // Parse Twitch badge-info..\n  badgeInfo: function badgeInfo(tags) {\n    return parseComplexTag(tags, 'badge-info');\n  },\n  // Parse Twitch emotes..\n  emotes: function emotes(tags) {\n    return parseComplexTag(tags, 'emotes', '/', ':', ',');\n  },\n  // Parse regex emotes..\n  emoteRegex: function emoteRegex(msg, code, id, obj) {\n    nonspaceRegex.lastIndex = 0;\n    var regex = new RegExp('(\\\\b|^|\\\\s)' + _.unescapeHtml(code) + '(\\\\b|$|\\\\s)');\n    var match; // Check if emote code matches using RegExp and push it to the object..\n\n    while ((match = nonspaceRegex.exec(msg)) !== null) {\n      if (regex.test(match[0])) {\n        obj[id] = obj[id] || [];\n        obj[id].push([match.index, nonspaceRegex.lastIndex - 1]);\n      }\n    }\n  },\n  // Parse string emotes..\n  emoteString: function emoteString(msg, code, id, obj) {\n    nonspaceRegex.lastIndex = 0;\n    var match; // Check if emote code matches and push it to the object..\n\n    while ((match = nonspaceRegex.exec(msg)) !== null) {\n      if (match[0] === _.unescapeHtml(code)) {\n        obj[id] = obj[id] || [];\n        obj[id].push([match.index, nonspaceRegex.lastIndex - 1]);\n      }\n    }\n  },\n  // Transform the emotes object to a string with the following format..\n  // emote_id:first_index-last_index,another_first-another_last/another_emote_id:first_index-last_index\n  transformEmotes: function transformEmotes(emotes) {\n    var transformed = '';\n    Object.keys(emotes).forEach(function (id) {\n      transformed = \"\".concat(transformed + id, \":\");\n      emotes[id].forEach(function (index) {\n        return transformed = \"\".concat(transformed + index.join('-'), \",\");\n      });\n      transformed = \"\".concat(transformed.slice(0, -1), \"/\");\n    });\n    return transformed.slice(0, -1);\n  },\n  formTags: function formTags(tags) {\n    var result = [];\n\n    for (var key in tags) {\n      var value = _.escapeIRC(tags[key]);\n\n      result.push(\"\".concat(key, \"=\").concat(value));\n    }\n\n    return \"@\".concat(result.join(';'));\n  },\n  // Parse Twitch messages..\n  msg: function msg(data) {\n    var message = {\n      raw: data,\n      tags: {},\n      prefix: null,\n      command: null,\n      params: []\n    }; // Position and nextspace are used by the parser as a reference..\n\n    var position = 0;\n    var nextspace = 0; // The first thing we check for is IRCv3.2 message tags.\n    // http://ircv3.atheme.org/specification/message-tags-3.2\n\n    if (data.charCodeAt(0) === 64) {\n      nextspace = data.indexOf(' '); // Malformed IRC message..\n\n      if (nextspace === -1) {\n        return null;\n      } // Tags are split by a semi colon..\n\n\n      var rawTags = data.slice(1, nextspace).split(';');\n\n      for (var i = 0; i < rawTags.length; i++) {\n        // Tags delimited by an equals sign are key=value tags.\n        // If there's no equals, we assign the tag a value of true.\n        var tag = rawTags[i];\n        var pair = tag.split('=');\n        message.tags[pair[0]] = tag.substring(tag.indexOf('=') + 1) || true;\n      }\n\n      position = nextspace + 1;\n    } // Skip any trailing whitespace..\n\n\n    while (data.charCodeAt(position) === 32) {\n      position++;\n    } // Extract the message's prefix if present. Prefixes are prepended with a colon..\n\n\n    if (data.charCodeAt(position) === 58) {\n      nextspace = data.indexOf(' ', position); // If there's nothing after the prefix, deem this message to be malformed.\n\n      if (nextspace === -1) {\n        return null;\n      }\n\n      message.prefix = data.slice(position + 1, nextspace);\n      position = nextspace + 1; // Skip any trailing whitespace..\n\n      while (data.charCodeAt(position) === 32) {\n        position++;\n      }\n    }\n\n    nextspace = data.indexOf(' ', position); // If there's no more whitespace left, extract everything from the\n    // current position to the end of the string as the command..\n\n    if (nextspace === -1) {\n      if (data.length > position) {\n        message.command = data.slice(position);\n        return message;\n      }\n\n      return null;\n    } // Else, the command is the current position up to the next space. After\n    // that, we expect some parameters.\n\n\n    message.command = data.slice(position, nextspace);\n    position = nextspace + 1; // Skip any trailing whitespace..\n\n    while (data.charCodeAt(position) === 32) {\n      position++;\n    }\n\n    while (position < data.length) {\n      nextspace = data.indexOf(' ', position); // If the character is a colon, we've got a trailing parameter.\n      // At this point, there are no extra params, so we push everything\n      // from after the colon to the end of the string, to the params array\n      // and break out of the loop.\n\n      if (data.charCodeAt(position) === 58) {\n        message.params.push(data.slice(position + 1));\n        break;\n      } // If we still have some whitespace...\n\n\n      if (nextspace !== -1) {\n        // Push whatever's between the current position and the next\n        // space to the params array.\n        message.params.push(data.slice(position, nextspace));\n        position = nextspace + 1; // Skip any trailing whitespace and continue looping.\n\n        while (data.charCodeAt(position) === 32) {\n          position++;\n        }\n\n        continue;\n      } // If we don't have any more whitespace and the param isn't trailing,\n      // push everything remaining to the params array.\n\n\n      if (nextspace === -1) {\n        message.params.push(data.slice(position));\n        break;\n      }\n    }\n\n    return message;\n  }\n};","map":{"version":3,"sources":["D:/Hobbies/apg-interface/node_modules/tmi.js/lib/parser.js"],"names":["_","require","nonspaceRegex","parseComplexTag","tags","tagKey","splA","splB","splC","raw","undefined","tagIsString","spl","split","i","length","parts","val","module","exports","badges","badgeInfo","emotes","emoteRegex","msg","code","id","obj","lastIndex","regex","RegExp","unescapeHtml","match","exec","test","push","index","emoteString","transformEmotes","transformed","Object","keys","forEach","join","slice","formTags","result","key","value","escapeIRC","data","message","prefix","command","params","position","nextspace","charCodeAt","indexOf","rawTags","tag","pair","substring"],"mappings":"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","sourcesContent":["/*\r\n\tCopyright (c) 2013-2015, Fionn Kelleher All rights reserved.\r\n\r\n\tRedistribution and use in source and binary forms, with or without modification,\r\n\tare permitted provided that the following conditions are met:\r\n\r\n\t\tRedistributions of source code must retain the above copyright notice,\r\n\t\tthis list of conditions and the following disclaimer.\r\n\r\n\t\tRedistributions in binary form must reproduce the above copyright notice,\r\n\t\tthis list of conditions and the following disclaimer in the documentation and/or other materials\r\n\t\tprovided with the distribution.\r\n\r\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n\tANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n\tWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n\tIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n\tINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n\t(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n\tOR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n\tWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\tARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\r\n\tOF SUCH DAMAGE.\r\n*/\r\nconst _ = require('./utils');\r\nconst nonspaceRegex = /\\S+/g;\r\n\r\nfunction parseComplexTag(tags, tagKey, splA = ',', splB = '/', splC) {\r\n\tconst raw = tags[tagKey];\r\n\t\r\n\tif(raw === undefined) {\r\n\t\treturn tags;\r\n\t}\r\n\r\n\tconst tagIsString = typeof raw === 'string';\r\n\ttags[tagKey + '-raw'] = tagIsString ? raw : null;\r\n\r\n\tif(raw === true) {\r\n\t\ttags[tagKey] = null;\r\n\t\treturn tags;\r\n\t}\r\n\r\n\ttags[tagKey] = {};\r\n\r\n\tif(tagIsString) {\r\n\t\tconst spl = raw.split(splA);\r\n\r\n\t\tfor (let i = 0; i < spl.length; i++) {\r\n\t\t\tconst parts = spl[i].split(splB);\r\n\t\t\tlet val = parts[1];\r\n\t\t\tif(splC !== undefined && val) {\r\n\t\t\t\tval = val.split(splC);\r\n\t\t\t}\r\n\t\t\ttags[tagKey][parts[0]] = val || null;\r\n\t\t}\r\n\t}\r\n\treturn tags;\r\n}\r\n\r\nmodule.exports = {\r\n\t// Parse Twitch badges..\r\n\tbadges(tags) {\r\n\t\treturn parseComplexTag(tags, 'badges');\r\n\t},\r\n\r\n\t// Parse Twitch badge-info..\r\n\tbadgeInfo(tags) {\r\n\t\treturn parseComplexTag(tags, 'badge-info');\r\n\t},\r\n\r\n\t// Parse Twitch emotes..\r\n\temotes(tags) {\r\n\t\treturn parseComplexTag(tags, 'emotes', '/', ':', ',');\r\n\t},\r\n\r\n\t// Parse regex emotes..\r\n\temoteRegex(msg, code, id, obj) {\r\n\t\tnonspaceRegex.lastIndex = 0;\r\n\t\tconst regex = new RegExp('(\\\\b|^|\\\\s)' + _.unescapeHtml(code) + '(\\\\b|$|\\\\s)');\r\n\t\tlet match;\r\n\r\n\t\t// Check if emote code matches using RegExp and push it to the object..\r\n\t\twhile ((match = nonspaceRegex.exec(msg)) !== null) {\r\n\t\t\tif(regex.test(match[0])) {\r\n\t\t\t\tobj[id] = obj[id] || [];\r\n\t\t\t\tobj[id].push([ match.index, nonspaceRegex.lastIndex - 1 ]);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// Parse string emotes..\r\n\temoteString(msg, code, id, obj) {\r\n\t\tnonspaceRegex.lastIndex = 0;\r\n\t\tlet match;\r\n\r\n\t\t// Check if emote code matches and push it to the object..\r\n\t\twhile ((match = nonspaceRegex.exec(msg)) !== null) {\r\n\t\t\tif(match[0] === _.unescapeHtml(code)) {\r\n\t\t\t\tobj[id] = obj[id] || [];\r\n\t\t\t\tobj[id].push([ match.index, nonspaceRegex.lastIndex - 1 ]);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// Transform the emotes object to a string with the following format..\r\n\t// emote_id:first_index-last_index,another_first-another_last/another_emote_id:first_index-last_index\r\n\ttransformEmotes(emotes) {\r\n\t\tlet transformed = '';\r\n\r\n\t\tObject.keys(emotes).forEach(id => {\r\n\t\t\ttransformed = `${transformed+id}:`;\r\n\t\t\temotes[id].forEach(\r\n\t\t\t\tindex => transformed = `${transformed+index.join('-')},`\r\n\t\t\t);\r\n\t\t\ttransformed = `${transformed.slice(0, -1)}/`;\r\n\t\t});\r\n\t\treturn transformed.slice(0, -1);\r\n\t},\r\n\r\n\tformTags(tags) {\r\n\t\tconst result = [];\r\n\t\tfor(const key in tags) {\r\n\t\t\tconst value = _.escapeIRC(tags[key]);\r\n\t\t\tresult.push(`${key}=${value}`);\r\n\t\t}\r\n\t\treturn `@${result.join(';')}`;\r\n\t},\r\n\r\n\t// Parse Twitch messages..\r\n\tmsg(data) {\r\n\t\tconst message = {\r\n\t\t\traw: data,\r\n\t\t\ttags: {},\r\n\t\t\tprefix: null,\r\n\t\t\tcommand: null,\r\n\t\t\tparams: []\r\n\t\t};\r\n\r\n\t\t// Position and nextspace are used by the parser as a reference..\r\n\t\tlet position = 0;\r\n\t\tlet nextspace = 0;\r\n\r\n\t\t// The first thing we check for is IRCv3.2 message tags.\r\n\t\t// http://ircv3.atheme.org/specification/message-tags-3.2\r\n\t\tif(data.charCodeAt(0) === 64) {\r\n\t\t\tnextspace = data.indexOf(' ');\r\n\r\n\t\t\t// Malformed IRC message..\r\n\t\t\tif(nextspace === -1) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// Tags are split by a semi colon..\r\n\t\t\tconst rawTags = data.slice(1, nextspace).split(';');\r\n\r\n\t\t\tfor (let i = 0; i < rawTags.length; i++) {\r\n\t\t\t\t// Tags delimited by an equals sign are key=value tags.\r\n\t\t\t\t// If there's no equals, we assign the tag a value of true.\r\n\t\t\t\tconst tag = rawTags[i];\r\n\t\t\t\tconst pair = tag.split('=');\r\n\t\t\t\tmessage.tags[pair[0]] = tag.substring(tag.indexOf('=') + 1) || true;\r\n\t\t\t}\r\n\r\n\t\t\tposition = nextspace + 1;\r\n\t\t}\r\n\r\n\t\t// Skip any trailing whitespace..\r\n\t\twhile (data.charCodeAt(position) === 32) {\r\n\t\t\tposition++;\r\n\t\t}\r\n\r\n\t\t// Extract the message's prefix if present. Prefixes are prepended with a colon..\r\n\t\tif(data.charCodeAt(position) === 58) {\r\n\t\t\tnextspace = data.indexOf(' ', position);\r\n\r\n\t\t\t// If there's nothing after the prefix, deem this message to be malformed.\r\n\t\t\tif(nextspace === -1) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tmessage.prefix = data.slice(position + 1, nextspace);\r\n\t\t\tposition = nextspace + 1;\r\n\r\n\t\t\t// Skip any trailing whitespace..\r\n\t\t\twhile (data.charCodeAt(position) === 32) {\r\n\t\t\t\tposition++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tnextspace = data.indexOf(' ', position);\r\n\r\n\t\t// If there's no more whitespace left, extract everything from the\r\n\t\t// current position to the end of the string as the command..\r\n\t\tif(nextspace === -1) {\r\n\t\t\tif(data.length > position) {\r\n\t\t\t\tmessage.command = data.slice(position);\r\n\t\t\t\treturn message;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Else, the command is the current position up to the next space. After\r\n\t\t// that, we expect some parameters.\r\n\t\tmessage.command = data.slice(position, nextspace);\r\n\r\n\t\tposition = nextspace + 1;\r\n\r\n\t\t// Skip any trailing whitespace..\r\n\t\twhile (data.charCodeAt(position) === 32) {\r\n\t\t\tposition++;\r\n\t\t}\r\n\r\n\t\twhile (position < data.length) {\r\n\t\t\tnextspace = data.indexOf(' ', position);\r\n\r\n\t\t\t// If the character is a colon, we've got a trailing parameter.\r\n\t\t\t// At this point, there are no extra params, so we push everything\r\n\t\t\t// from after the colon to the end of the string, to the params array\r\n\t\t\t// and break out of the loop.\r\n\t\t\tif(data.charCodeAt(position) === 58) {\r\n\t\t\t\tmessage.params.push(data.slice(position + 1));\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t// If we still have some whitespace...\r\n\t\t\tif(nextspace !== -1) {\r\n\t\t\t\t// Push whatever's between the current position and the next\r\n\t\t\t\t// space to the params array.\r\n\t\t\t\tmessage.params.push(data.slice(position, nextspace));\r\n\t\t\t\tposition = nextspace + 1;\r\n\r\n\t\t\t\t// Skip any trailing whitespace and continue looping.\r\n\t\t\t\twhile (data.charCodeAt(position) === 32) {\r\n\t\t\t\t\tposition++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// If we don't have any more whitespace and the param isn't trailing,\r\n\t\t\t// push everything remaining to the params array.\r\n\t\t\tif(nextspace === -1) {\r\n\t\t\t\tmessage.params.push(data.slice(position));\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn message;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"script"}