{"ast":null,"code":"var _ = require('./utils'); // Enable followers-only mode on a channel..\n\n\nfunction followersonly(channel, minutes) {\n  var _this = this;\n\n  channel = _.channel(channel);\n  minutes = _.get(minutes, 30); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(this._getPromiseDelay(), channel, \"/followers \".concat(minutes), function (resolve, reject) {\n    // Received _promiseFollowers event, resolve or reject..\n    _this.once('_promiseFollowers', function (err) {\n      if (!err) {\n        resolve([channel, ~~minutes]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Disable followers-only mode on a channel..\n\n\nfunction followersonlyoff(channel) {\n  var _this2 = this;\n\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(this._getPromiseDelay(), channel, '/followersoff', function (resolve, reject) {\n    // Received _promiseFollowersoff event, resolve or reject..\n    _this2.once('_promiseFollowersoff', function (err) {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Leave a channel..\n\n\nfunction part(channel) {\n  var _this3 = this;\n\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(this._getPromiseDelay(), null, \"PART \".concat(channel), function (resolve, reject) {\n    // Received _promisePart event, resolve or reject..\n    _this3.once('_promisePart', function (err) {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Enable R9KBeta mode on a channel..\n\n\nfunction r9kbeta(channel) {\n  var _this4 = this;\n\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(this._getPromiseDelay(), channel, '/r9kbeta', function (resolve, reject) {\n    // Received _promiseR9kbeta event, resolve or reject..\n    _this4.once('_promiseR9kbeta', function (err) {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Disable R9KBeta mode on a channel..\n\n\nfunction r9kbetaoff(channel) {\n  var _this5 = this;\n\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(this._getPromiseDelay(), channel, '/r9kbetaoff', function (resolve, reject) {\n    // Received _promiseR9kbetaoff event, resolve or reject..\n    _this5.once('_promiseR9kbetaoff', function (err) {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Enable slow mode on a channel..\n\n\nfunction slow(channel, seconds) {\n  var _this6 = this;\n\n  channel = _.channel(channel);\n  seconds = _.get(seconds, 300); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(this._getPromiseDelay(), channel, \"/slow \".concat(seconds), function (resolve, reject) {\n    // Received _promiseSlow event, resolve or reject..\n    _this6.once('_promiseSlow', function (err) {\n      if (!err) {\n        resolve([channel, ~~seconds]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // Disable slow mode on a channel..\n\n\nfunction slowoff(channel) {\n  var _this7 = this;\n\n  channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n  return this._sendCommand(this._getPromiseDelay(), channel, '/slowoff', function (resolve, reject) {\n    // Received _promiseSlowoff event, resolve or reject..\n    _this7.once('_promiseSlowoff', function (err) {\n      if (!err) {\n        resolve([channel]);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  // Send action message (/me <message>) on a channel..\n  action: function action(channel, message) {\n    channel = _.channel(channel);\n    message = \"\\x01ACTION \".concat(message, \"\\x01\"); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendMessage(this._getPromiseDelay(), channel, message, function (resolve, _reject) {\n      // At this time, there is no possible way to detect if a message has been sent has been eaten\n      // by the server, so we can only resolve the Promise.\n      resolve([channel, message]);\n    });\n  },\n  // Ban username on channel..\n  ban: function ban(channel, username, reason) {\n    var _this8 = this;\n\n    channel = _.channel(channel);\n    username = _.username(username);\n    reason = _.get(reason, ''); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/ban \".concat(username, \" \").concat(reason), function (resolve, reject) {\n      // Received _promiseBan event, resolve or reject..\n      _this8.once('_promiseBan', function (err) {\n        if (!err) {\n          resolve([channel, username, reason]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Clear all messages on a channel..\n  clear: function clear(channel) {\n    var _this9 = this;\n\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, '/clear', function (resolve, reject) {\n      // Received _promiseClear event, resolve or reject..\n      _this9.once('_promiseClear', function (err) {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Change the color of your username..\n  color: function color(channel, newColor) {\n    var _this10 = this;\n\n    newColor = _.get(newColor, channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), '#tmijs', \"/color \".concat(newColor), function (resolve, reject) {\n      // Received _promiseColor event, resolve or reject..\n      _this10.once('_promiseColor', function (err) {\n        if (!err) {\n          resolve([newColor]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Run commercial on a channel for X seconds..\n  commercial: function commercial(channel, seconds) {\n    var _this11 = this;\n\n    channel = _.channel(channel);\n    seconds = _.get(seconds, 30); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/commercial \".concat(seconds), function (resolve, reject) {\n      // Received _promiseCommercial event, resolve or reject..\n      _this11.once('_promiseCommercial', function (err) {\n        if (!err) {\n          resolve([channel, ~~seconds]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Delete a specific message on a channel\n  deletemessage: function deletemessage(channel, messageUUID) {\n    var _this12 = this;\n\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/delete \".concat(messageUUID), function (resolve, reject) {\n      // Received _promiseDeletemessage event, resolve or reject..\n      _this12.once('_promiseDeletemessage', function (err) {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Enable emote-only mode on a channel..\n  emoteonly: function emoteonly(channel) {\n    var _this13 = this;\n\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, '/emoteonly', function (resolve, reject) {\n      // Received _promiseEmoteonly event, resolve or reject..\n      _this13.once('_promiseEmoteonly', function (err) {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Disable emote-only mode on a channel..\n  emoteonlyoff: function emoteonlyoff(channel) {\n    var _this14 = this;\n\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, '/emoteonlyoff', function (resolve, reject) {\n      // Received _promiseEmoteonlyoff event, resolve or reject..\n      _this14.once('_promiseEmoteonlyoff', function (err) {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Enable followers-only mode on a channel..\n  followersonly: followersonly,\n  // Alias for followersonly()..\n  followersmode: followersonly,\n  // Disable followers-only mode on a channel..\n  followersonlyoff: followersonlyoff,\n  // Alias for followersonlyoff()..\n  followersmodeoff: followersonlyoff,\n  // Host a channel..\n  host: function host(channel, target) {\n    var _this15 = this;\n\n    channel = _.channel(channel);\n    target = _.username(target); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(2000, channel, \"/host \".concat(target), function (resolve, reject) {\n      // Received _promiseHost event, resolve or reject..\n      _this15.once('_promiseHost', function (err, remaining) {\n        if (!err) {\n          resolve([channel, target, ~~remaining]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Join a channel..\n  join: function join(channel) {\n    var _this16 = this;\n\n    channel = _.channel(channel); // Send the command to the server ..\n\n    return this._sendCommand(null, null, \"JOIN \".concat(channel), function (resolve, reject) {\n      var eventName = '_promiseJoin';\n      var hasFulfilled = false;\n\n      var listener = function listener(err, joinedChannel) {\n        if (channel === _.channel(joinedChannel)) {\n          // Received _promiseJoin event for the target channel, resolve or reject..\n          _this16.removeListener(eventName, listener);\n\n          hasFulfilled = true;\n\n          if (!err) {\n            resolve([channel]);\n          } else {\n            reject(err);\n          }\n        }\n      };\n\n      _this16.on(eventName, listener); // Race the Promise against a delay..\n\n\n      var delay = _this16._getPromiseDelay();\n\n      _.promiseDelay(delay).then(function () {\n        if (!hasFulfilled) {\n          _this16.emit(eventName, 'No response from Twitch.', channel);\n        }\n      });\n    });\n  },\n  // Mod username on channel..\n  mod: function mod(channel, username) {\n    var _this17 = this;\n\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/mod \".concat(username), function (resolve, reject) {\n      // Received _promiseMod event, resolve or reject..\n      _this17.once('_promiseMod', function (err) {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Get list of mods on a channel..\n  mods: function mods(channel) {\n    var _this18 = this;\n\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, '/mods', function (resolve, reject) {\n      // Received _promiseMods event, resolve or reject..\n      _this18.once('_promiseMods', function (err, mods) {\n        if (!err) {\n          // Update the internal list of moderators..\n          mods.forEach(function (username) {\n            if (!_this18.moderators[channel]) {\n              _this18.moderators[channel] = [];\n            }\n\n            if (!_this18.moderators[channel].includes(username)) {\n              _this18.moderators[channel].push(username);\n            }\n          });\n          resolve(mods);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Leave a channel..\n  part: part,\n  // Alias for part()..\n  leave: part,\n  // Send a ping to the server..\n  ping: function ping() {\n    var _this19 = this;\n\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), null, 'PING', function (resolve, _reject) {\n      // Update the internal ping timeout check interval..\n      _this19.latency = new Date();\n      _this19.pingTimeout = setTimeout(function () {\n        if (_this19.ws !== null) {\n          _this19.wasCloseCalled = false;\n\n          _this19.log.error('Ping timeout.');\n\n          _this19.ws.close();\n\n          clearInterval(_this19.pingLoop);\n          clearTimeout(_this19.pingTimeout);\n        }\n      }, _.get(_this19.opts.connection.timeout, 9999)); // Received _promisePing event, resolve or reject..\n\n      _this19.once('_promisePing', function (latency) {\n        return resolve([parseFloat(latency)]);\n      });\n    });\n  },\n  // Enable R9KBeta mode on a channel..\n  r9kbeta: r9kbeta,\n  // Alias for r9kbeta()..\n  r9kmode: r9kbeta,\n  // Disable R9KBeta mode on a channel..\n  r9kbetaoff: r9kbetaoff,\n  // Alias for r9kbetaoff()..\n  r9kmodeoff: r9kbetaoff,\n  // Send a raw message to the server..\n  raw: function raw(message) {\n    // Send the command to the server and race the Promise against a delay..\n    return this._sendCommand(this._getPromiseDelay(), null, message, function (resolve, _reject) {\n      resolve([message]);\n    });\n  },\n  // Send a message on a channel..\n  say: function say(channel, message) {\n    channel = _.channel(channel);\n\n    if (message.startsWith('.') && !message.startsWith('..') || message.startsWith('/') || message.startsWith('\\\\')) {\n      // Check if the message is an action message..\n      if (message.substr(1, 3) === 'me ') {\n        return this.action(channel, message.substr(4));\n      } else {\n        // Send the command to the server and race the Promise against a delay..\n        return this._sendCommand(this._getPromiseDelay(), channel, message, function (resolve, _reject) {\n          // At this time, there is no possible way to detect if a message has been sent has been eaten\n          // by the server, so we can only resolve the Promise.\n          resolve([channel, message]);\n        });\n      }\n    } // Send the command to the server and race the Promise against a delay..\n\n\n    return this._sendMessage(this._getPromiseDelay(), channel, message, function (resolve, _reject) {\n      // At this time, there is no possible way to detect if a message has been sent has been eaten\n      // by the server, so we can only resolve the Promise.\n      resolve([channel, message]);\n    });\n  },\n  // Enable slow mode on a channel..\n  slow: slow,\n  // Alias for slow()..\n  slowmode: slow,\n  // Disable slow mode on a channel..\n  slowoff: slowoff,\n  // Alias for slowoff()..\n  slowmodeoff: slowoff,\n  // Enable subscribers mode on a channel..\n  subscribers: function subscribers(channel) {\n    var _this20 = this;\n\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, '/subscribers', function (resolve, reject) {\n      // Received _promiseSubscribers event, resolve or reject..\n      _this20.once('_promiseSubscribers', function (err) {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Disable subscribers mode on a channel..\n  subscribersoff: function subscribersoff(channel) {\n    var _this21 = this;\n\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, '/subscribersoff', function (resolve, reject) {\n      // Received _promiseSubscribersoff event, resolve or reject..\n      _this21.once('_promiseSubscribersoff', function (err) {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Timeout username on channel for X seconds..\n  timeout: function timeout(channel, username, seconds, reason) {\n    var _this22 = this;\n\n    channel = _.channel(channel);\n    username = _.username(username);\n\n    if (seconds !== null && !_.isInteger(seconds)) {\n      reason = seconds;\n      seconds = 300;\n    }\n\n    seconds = _.get(seconds, 300);\n    reason = _.get(reason, ''); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/timeout \".concat(username, \" \").concat(seconds, \" \").concat(reason), function (resolve, reject) {\n      // Received _promiseTimeout event, resolve or reject..\n      _this22.once('_promiseTimeout', function (err) {\n        if (!err) {\n          resolve([channel, username, ~~seconds, reason]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Unban username on channel..\n  unban: function unban(channel, username) {\n    var _this23 = this;\n\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/unban \".concat(username), function (resolve, reject) {\n      // Received _promiseUnban event, resolve or reject..\n      _this23.once('_promiseUnban', function (err) {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // End the current hosting..\n  unhost: function unhost(channel) {\n    var _this24 = this;\n\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(2000, channel, '/unhost', function (resolve, reject) {\n      // Received _promiseUnhost event, resolve or reject..\n      _this24.once('_promiseUnhost', function (err) {\n        if (!err) {\n          resolve([channel]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Unmod username on channel..\n  unmod: function unmod(channel, username) {\n    var _this25 = this;\n\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/unmod \".concat(username), function (resolve, reject) {\n      // Received _promiseUnmod event, resolve or reject..\n      _this25.once('_promiseUnmod', function (err) {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Unvip username on channel..\n  unvip: function unvip(channel, username) {\n    var _this26 = this;\n\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/unvip \".concat(username), function (resolve, reject) {\n      // Received _promiseUnvip event, resolve or reject..\n      _this26.once('_promiseUnvip', function (err) {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Add username to VIP list on channel..\n  vip: function vip(channel, username) {\n    var _this27 = this;\n\n    channel = _.channel(channel);\n    username = _.username(username); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, \"/vip \".concat(username), function (resolve, reject) {\n      // Received _promiseVip event, resolve or reject..\n      _this27.once('_promiseVip', function (err) {\n        if (!err) {\n          resolve([channel, username]);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Get list of VIPs on a channel..\n  vips: function vips(channel) {\n    var _this28 = this;\n\n    channel = _.channel(channel); // Send the command to the server and race the Promise against a delay..\n\n    return this._sendCommand(this._getPromiseDelay(), channel, '/vips', function (resolve, reject) {\n      // Received _promiseVips event, resolve or reject..\n      _this28.once('_promiseVips', function (err, vips) {\n        if (!err) {\n          resolve(vips);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  },\n  // Send an whisper message to a user..\n  whisper: function whisper(username, message) {\n    var _this29 = this;\n\n    username = _.username(username); // The server will not send a whisper to the account that sent it.\n\n    if (username === this.getUsername()) {\n      return Promise.reject('Cannot send a whisper to the same account.');\n    } // Send the command to the server and race the Promise against a delay..\n\n\n    return this._sendCommand(this._getPromiseDelay(), '#tmijs', \"/w \".concat(username, \" \").concat(message), function (_resolve, reject) {\n      _this29.once('_promiseWhisper', function (err) {\n        if (err) {\n          reject(err);\n        }\n      });\n    }).catch(function (err) {\n      // Either an \"actual\" error occured or the timeout triggered\n      // the latter means no errors have occured and we can resolve\n      // else just elevate the error\n      if (err && typeof err === 'string' && err.indexOf('No response from Twitch.') !== 0) {\n        throw err;\n      }\n\n      var from = _.channel(username);\n\n      var userstate = Object.assign({\n        'message-type': 'whisper',\n        'message-id': null,\n        'thread-id': null,\n        username: _this29.getUsername()\n      }, _this29.globaluserstate); // Emit for both, whisper and message..\n\n      _this29.emits(['whisper', 'message'], [[from, userstate, message, true], [from, userstate, message, true]]);\n\n      return [username, message];\n    });\n  }\n};","map":{"version":3,"sources":["D:/Hobbies/apg-interface/node_modules/tmi.js/lib/commands.js"],"names":["_","require","followersonly","channel","minutes","get","_sendCommand","_getPromiseDelay","resolve","reject","once","err","followersonlyoff","part","r9kbeta","r9kbetaoff","slow","seconds","slowoff","module","exports","action","message","_sendMessage","_reject","ban","username","reason","clear","color","newColor","commercial","deletemessage","messageUUID","emoteonly","emoteonlyoff","followersmode","followersmodeoff","host","target","remaining","join","eventName","hasFulfilled","listener","joinedChannel","removeListener","on","delay","promiseDelay","then","emit","mod","mods","forEach","moderators","includes","push","leave","ping","latency","Date","pingTimeout","setTimeout","ws","wasCloseCalled","log","error","close","clearInterval","pingLoop","clearTimeout","opts","connection","timeout","parseFloat","r9kmode","r9kmodeoff","raw","say","startsWith","substr","slowmode","slowmodeoff","subscribers","subscribersoff","isInteger","unban","unhost","unmod","unvip","vip","vips","whisper","getUsername","Promise","_resolve","catch","indexOf","from","userstate","Object","assign","globaluserstate","emits"],"mappings":"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","sourcesContent":["const _ = require('./utils');\n\n// Enable followers-only mode on a channel..\nfunction followersonly(channel, minutes) {\n\tchannel = _.channel(channel);\n\tminutes = _.get(minutes, 30);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(this._getPromiseDelay(), channel, `/followers ${minutes}`, (resolve, reject) => {\n\t\t// Received _promiseFollowers event, resolve or reject..\n\t\tthis.once('_promiseFollowers', err => {\n\t\t\tif(!err) { resolve([ channel, ~~minutes ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Disable followers-only mode on a channel..\nfunction followersonlyoff(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(this._getPromiseDelay(), channel, '/followersoff', (resolve, reject) => {\n\t\t// Received _promiseFollowersoff event, resolve or reject..\n\t\tthis.once('_promiseFollowersoff', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Leave a channel..\nfunction part(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(this._getPromiseDelay(), null, `PART ${channel}`, (resolve, reject) => {\n\t\t// Received _promisePart event, resolve or reject..\n\t\tthis.once('_promisePart', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Enable R9KBeta mode on a channel..\nfunction r9kbeta(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(this._getPromiseDelay(), channel, '/r9kbeta', (resolve, reject) => {\n\t\t// Received _promiseR9kbeta event, resolve or reject..\n\t\tthis.once('_promiseR9kbeta', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Disable R9KBeta mode on a channel..\nfunction r9kbetaoff(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(this._getPromiseDelay(), channel, '/r9kbetaoff', (resolve, reject) => {\n\t\t// Received _promiseR9kbetaoff event, resolve or reject..\n\t\tthis.once('_promiseR9kbetaoff', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Enable slow mode on a channel..\nfunction slow(channel, seconds) {\n\tchannel = _.channel(channel);\n\tseconds = _.get(seconds, 300);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(this._getPromiseDelay(), channel, `/slow ${seconds}`, (resolve, reject) => {\n\t\t// Received _promiseSlow event, resolve or reject..\n\t\tthis.once('_promiseSlow', err => {\n\t\t\tif(!err) { resolve([ channel, ~~seconds ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\n// Disable slow mode on a channel..\nfunction slowoff(channel) {\n\tchannel = _.channel(channel);\n\t// Send the command to the server and race the Promise against a delay..\n\treturn this._sendCommand(this._getPromiseDelay(), channel, '/slowoff', (resolve, reject) => {\n\t\t// Received _promiseSlowoff event, resolve or reject..\n\t\tthis.once('_promiseSlowoff', err => {\n\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\telse { reject(err); }\n\t\t});\n\t});\n}\n\nmodule.exports = {\n\t// Send action message (/me <message>) on a channel..\n\taction(channel, message) {\n\t\tchannel = _.channel(channel);\n\t\tmessage = `\\u0001ACTION ${message}\\u0001`;\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, _reject) => {\n\t\t\t// At this time, there is no possible way to detect if a message has been sent has been eaten\n\t\t\t// by the server, so we can only resolve the Promise.\n\t\t\tresolve([ channel, message ]);\n\t\t});\n\t},\n\n\t// Ban username on channel..\n\tban(channel, username, reason) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\treason = _.get(reason, '');\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, `/ban ${username} ${reason}`, (resolve, reject) => {\n\t\t\t// Received _promiseBan event, resolve or reject..\n\t\t\tthis.once('_promiseBan', err => {\n\t\t\t\tif(!err) { resolve([ channel, username, reason ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Clear all messages on a channel..\n\tclear(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, '/clear', (resolve, reject) => {\n\t\t\t// Received _promiseClear event, resolve or reject..\n\t\t\tthis.once('_promiseClear', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Change the color of your username..\n\tcolor(channel, newColor) {\n\t\tnewColor = _.get(newColor, channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), '#tmijs', `/color ${newColor}`, (resolve, reject) => {\n\t\t\t// Received _promiseColor event, resolve or reject..\n\t\t\tthis.once('_promiseColor', err => {\n\t\t\t\tif(!err) { resolve([ newColor ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Run commercial on a channel for X seconds..\n\tcommercial(channel, seconds) {\n\t\tchannel = _.channel(channel);\n\t\tseconds = _.get(seconds, 30);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, `/commercial ${seconds}`, (resolve, reject) => {\n\t\t\t// Received _promiseCommercial event, resolve or reject..\n\t\t\tthis.once('_promiseCommercial', err => {\n\t\t\t\tif(!err) { resolve([ channel, ~~seconds ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\t\n\t// Delete a specific message on a channel\n\tdeletemessage(channel, messageUUID) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, `/delete ${messageUUID}`, (resolve, reject) => {\n\t\t\t// Received _promiseDeletemessage event, resolve or reject..\n\t\t\tthis.once('_promiseDeletemessage', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Enable emote-only mode on a channel..\n\temoteonly(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, '/emoteonly', (resolve, reject) => {\n\t\t\t// Received _promiseEmoteonly event, resolve or reject..\n\t\t\tthis.once('_promiseEmoteonly', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Disable emote-only mode on a channel..\n\temoteonlyoff(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, '/emoteonlyoff', (resolve, reject) => {\n\t\t\t// Received _promiseEmoteonlyoff event, resolve or reject..\n\t\t\tthis.once('_promiseEmoteonlyoff', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Enable followers-only mode on a channel..\n\tfollowersonly: followersonly,\n\n\t// Alias for followersonly()..\n\tfollowersmode: followersonly,\n\n\t// Disable followers-only mode on a channel..\n\tfollowersonlyoff: followersonlyoff,\n\n\t// Alias for followersonlyoff()..\n\tfollowersmodeoff: followersonlyoff,\n\n\t// Host a channel..\n\thost(channel, target) {\n\t\tchannel = _.channel(channel);\n\t\ttarget = _.username(target);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(2000, channel, `/host ${target}`, (resolve, reject) => {\n\t\t\t// Received _promiseHost event, resolve or reject..\n\t\t\tthis.once('_promiseHost', (err, remaining) => {\n\t\t\t\tif(!err) { resolve([ channel, target, ~~remaining ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Join a channel..\n\tjoin(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server ..\n\t\treturn this._sendCommand(null, null, `JOIN ${channel}`, (resolve, reject) => {\n\t\t\tconst eventName = '_promiseJoin';\n\t\t\tlet hasFulfilled = false;\n\t\t\tconst listener = (err, joinedChannel) => {\n\t\t\t\tif(channel === _.channel(joinedChannel)) {\n\t\t\t\t\t// Received _promiseJoin event for the target channel, resolve or reject..\n\t\t\t\t\tthis.removeListener(eventName, listener);\n\t\t\t\t\thasFulfilled = true;\n\t\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\t\telse { reject(err); }\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.on(eventName, listener);\n\t\t\t// Race the Promise against a delay..\n\t\t\tconst delay = this._getPromiseDelay();\n\t\t\t_.promiseDelay(delay).then(() => {\n\t\t\t\tif(!hasFulfilled) {\n\t\t\t\t\tthis.emit(eventName, 'No response from Twitch.', channel);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t},\n\n\t// Mod username on channel..\n\tmod(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, `/mod ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseMod event, resolve or reject..\n\t\t\tthis.once('_promiseMod', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Get list of mods on a channel..\n\tmods(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, '/mods', (resolve, reject) => {\n\t\t\t// Received _promiseMods event, resolve or reject..\n\t\t\tthis.once('_promiseMods', (err, mods) => {\n\t\t\t\tif(!err) {\n\t\t\t\t\t// Update the internal list of moderators..\n\t\t\t\t\tmods.forEach(username => {\n\t\t\t\t\t\tif(!this.moderators[channel]) { this.moderators[channel] = []; }\n\t\t\t\t\t\tif(!this.moderators[channel].includes(username)) { this.moderators[channel].push(username); }\n\t\t\t\t\t});\n\t\t\t\t\tresolve(mods);\n\t\t\t\t}\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Leave a channel..\n\tpart: part,\n\n\t// Alias for part()..\n\tleave: part,\n\n\t// Send a ping to the server..\n\tping() {\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), null, 'PING', (resolve, _reject) => {\n\t\t\t// Update the internal ping timeout check interval..\n\t\t\tthis.latency = new Date();\n\t\t\tthis.pingTimeout = setTimeout(() => {\n\t\t\t\tif(this.ws !== null) {\n\t\t\t\t\tthis.wasCloseCalled = false;\n\t\t\t\t\tthis.log.error('Ping timeout.');\n\t\t\t\t\tthis.ws.close();\n\n\t\t\t\t\tclearInterval(this.pingLoop);\n\t\t\t\t\tclearTimeout(this.pingTimeout);\n\t\t\t\t}\n\t\t\t}, _.get(this.opts.connection.timeout, 9999));\n\n\t\t\t// Received _promisePing event, resolve or reject..\n\t\t\tthis.once('_promisePing', latency => resolve([ parseFloat(latency) ]));\n\t\t});\n\t},\n\n\t// Enable R9KBeta mode on a channel..\n\tr9kbeta: r9kbeta,\n\n\t// Alias for r9kbeta()..\n\tr9kmode: r9kbeta,\n\n\t// Disable R9KBeta mode on a channel..\n\tr9kbetaoff: r9kbetaoff,\n\n\t// Alias for r9kbetaoff()..\n\tr9kmodeoff: r9kbetaoff,\n\n\t// Send a raw message to the server..\n\traw(message) {\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), null, message, (resolve, _reject) => {\n\t\t\tresolve([ message ]);\n\t\t});\n\t},\n\n\t// Send a message on a channel..\n\tsay(channel, message) {\n\t\tchannel = _.channel(channel);\n\n\t\tif((message.startsWith('.') && !message.startsWith('..')) || message.startsWith('/') || message.startsWith('\\\\')) {\n\t\t\t// Check if the message is an action message..\n\t\t\tif(message.substr(1, 3) === 'me ') {\n\t\t\t\treturn this.action(channel, message.substr(4));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Send the command to the server and race the Promise against a delay..\n\t\t\t\treturn this._sendCommand(this._getPromiseDelay(), channel, message, (resolve, _reject) => {\n\t\t\t\t\t// At this time, there is no possible way to detect if a message has been sent has been eaten\n\t\t\t\t\t// by the server, so we can only resolve the Promise.\n\t\t\t\t\tresolve([ channel, message ]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendMessage(this._getPromiseDelay(), channel, message, (resolve, _reject) => {\n\t\t\t// At this time, there is no possible way to detect if a message has been sent has been eaten\n\t\t\t// by the server, so we can only resolve the Promise.\n\t\t\tresolve([ channel, message ]);\n\t\t});\n\t},\n\n\t// Enable slow mode on a channel..\n\tslow: slow,\n\n\t// Alias for slow()..\n\tslowmode: slow,\n\n\t// Disable slow mode on a channel..\n\tslowoff: slowoff,\n\n\t// Alias for slowoff()..\n\tslowmodeoff: slowoff,\n\n\t// Enable subscribers mode on a channel..\n\tsubscribers(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, '/subscribers', (resolve, reject) => {\n\t\t\t// Received _promiseSubscribers event, resolve or reject..\n\t\t\tthis.once('_promiseSubscribers', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Disable subscribers mode on a channel..\n\tsubscribersoff(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, '/subscribersoff', (resolve, reject) => {\n\t\t\t// Received _promiseSubscribersoff event, resolve or reject..\n\t\t\tthis.once('_promiseSubscribersoff', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Timeout username on channel for X seconds..\n\ttimeout(channel, username, seconds, reason) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\n\t\tif(seconds !== null && !_.isInteger(seconds)) {\n\t\t\treason = seconds;\n\t\t\tseconds = 300;\n\t\t}\n\n\t\tseconds = _.get(seconds, 300);\n\t\treason = _.get(reason, '');\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, `/timeout ${username} ${seconds} ${reason}`, (resolve, reject) => {\n\t\t\t// Received _promiseTimeout event, resolve or reject..\n\t\t\tthis.once('_promiseTimeout', err => {\n\t\t\t\tif(!err) { resolve([ channel, username, ~~seconds, reason ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Unban username on channel..\n\tunban(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, `/unban ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseUnban event, resolve or reject..\n\t\t\tthis.once('_promiseUnban', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// End the current hosting..\n\tunhost(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(2000, channel, '/unhost', (resolve, reject) => {\n\t\t\t// Received _promiseUnhost event, resolve or reject..\n\t\t\tthis.once('_promiseUnhost', err => {\n\t\t\t\tif(!err) { resolve([ channel ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Unmod username on channel..\n\tunmod(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, `/unmod ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseUnmod event, resolve or reject..\n\t\t\tthis.once('_promiseUnmod', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Unvip username on channel..\n\tunvip(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, `/unvip ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseUnvip event, resolve or reject..\n\t\t\tthis.once('_promiseUnvip', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Add username to VIP list on channel..\n\tvip(channel, username) {\n\t\tchannel = _.channel(channel);\n\t\tusername = _.username(username);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, `/vip ${username}`, (resolve, reject) => {\n\t\t\t// Received _promiseVip event, resolve or reject..\n\t\t\tthis.once('_promiseVip', err => {\n\t\t\t\tif(!err) { resolve([ channel, username ]); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Get list of VIPs on a channel..\n\tvips(channel) {\n\t\tchannel = _.channel(channel);\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), channel, '/vips', (resolve, reject) => {\n\t\t\t// Received _promiseVips event, resolve or reject..\n\t\t\tthis.once('_promiseVips', (err, vips) => {\n\t\t\t\tif(!err) { resolve(vips); }\n\t\t\t\telse { reject(err); }\n\t\t\t});\n\t\t});\n\t},\n\n\t// Send an whisper message to a user..\n\twhisper(username, message) {\n\t\tusername = _.username(username);\n\n\t\t// The server will not send a whisper to the account that sent it.\n\t\tif(username === this.getUsername()) {\n\t\t\treturn Promise.reject('Cannot send a whisper to the same account.');\n\t\t}\n\t\t// Send the command to the server and race the Promise against a delay..\n\t\treturn this._sendCommand(this._getPromiseDelay(), '#tmijs', `/w ${username} ${message}`, (_resolve, reject) => {\n\t\t\tthis.once('_promiseWhisper', err => {\n\t\t\t\tif (err) { reject(err); }\n\t\t\t});\n\t\t}).catch(err => {\n\t\t\t// Either an \"actual\" error occured or the timeout triggered\n\t\t\t// the latter means no errors have occured and we can resolve\n\t\t\t// else just elevate the error\n\t\t\tif(err && typeof err === 'string' && err.indexOf('No response from Twitch.') !== 0) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconst from = _.channel(username);\n\t\t\tconst userstate = Object.assign({\n\t\t\t\t'message-type': 'whisper',\n\t\t\t\t'message-id': null,\n\t\t\t\t'thread-id': null,\n\t\t\t\tusername: this.getUsername()\n\t\t\t}, this.globaluserstate);\n\n\t\t\t// Emit for both, whisper and message..\n\t\t\tthis.emits([ 'whisper', 'message' ], [\n\t\t\t\t[ from, userstate, message, true ],\n\t\t\t\t[ from, userstate, message, true ]\n\t\t\t]);\n\t\t\treturn [ username, message ];\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}